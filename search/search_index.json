{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sobre o curso","text":""},{"location":"#sobre-o-curso","title":"Sobre o curso","text":"Caso prefira ver a apresenta\u00e7\u00e3o do curso em v\u00eddeo <p>Esse aula ainda n\u00e3o est\u00e1 dispon\u00edvel em formato de v\u00eddeo, somente em texto ou live! </p> <p>Aula </p> <p>Ol\u00e1, boas vindas ao nosso curso de Temporal.io!</p> <p>A nossa inten\u00e7\u00e3o neste curso \u00e9 espalhar a palavra do Temporal.io por a\u00ed, na inten\u00e7\u00e3o de criar uma comunidade mais forte e que possamos fomentar o uso dele nas empresas do nosso Brasil. Vamos explorar o que \u00e9 o Temporal.io, como funciona o Temporal Client, ver tudo funcionando direitinho na UI e muito mais. Tudo isso para oferecer uma boa base para quem quer trabalhar com desenvolvimento de workers com Temporal. A ideia desse curso \u00e9 apresentar os conceitos de forma pr\u00e1tica, construindo um projeto do zero e indo at\u00e9 os conceitos mais aprofundados.</p>"},{"location":"#o-que-e-o-temporal","title":"O que \u00e9 o Temporal?","text":"<p>Temporal \u00e9 uma plataforma de orquestra\u00e7\u00e3o de workflows (fluxos de trabalho) distribu\u00eddos e escal\u00e1veis. Ele permite que os desenvolvedores criem, executem e gerenciem processos de longa dura\u00e7\u00e3o, como tarefas que podem envolver m\u00faltiplas etapas e intera\u00e7\u00f5es complexas, sem se preocupar com falhas tempor\u00e1rias ou com a complexidade de gerenciar estados de maneira manual.</p>"},{"location":"#sobre-o-curso_1","title":"Sobre o curso","text":"<p>Este curso foi desenvolvido para oferecer uma experi\u00eancia pr\u00e1tica no uso do Temporal, uma das ferramentas mais modernas para constru\u00e7\u00f5es de sistemas resilientes e d longa-dura\u00e7\u00e3o do mercado. Ao longo do curso, o objetivo \u00e9 que voc\u00ea obtenha uma compreens\u00e3o das funcionalidades principais do Temporal e de boas pr\u00e1ticas associadas a ele.</p> <p>Para a constru\u00e7\u00e3o do projeto, ser\u00e3o utilizadas as vers\u00f5es mais recentes das ferramentas, dispon\u00edveis em 2025, como a vers\u00e3o v1.26.2 do Temporal, a vers\u00e3o al\u00e9m da vers\u00e3o v22.14.0 do Node.js (utilizado por mim durante as aulas), e as vers\u00f5es dos packages:</p> <ul> <li>@temporalio/worker 1.11.7</li> <li>@temporalio/common 1.11.7</li> <li>@temporalio/workflow 1.11.7</li> <li>@temporalio/activity 1.11.7</li> <li>@temporalio/client 1.11.7</li> <li>@temporalio/testing 1.11.7</li> </ul> <p>Mas voc\u1ebd pode utilizar tamb\u00e9m o seu SDK da sua liinguagem favorita (Java, .NET, PHP, Golang, Ruby ou Python).</p>"},{"location":"#o-que-voce-vai-aprender","title":"O que voc\u00ea vai aprender?","text":"<p>Aqui est\u00e1 uma vis\u00e3o geral dos t\u00f3picos que abordaremos neste curso:</p> <ol> <li> <p>O que \u00e9 o Temporal.io e qual o seu prop\u00f3sito: explicarei como o Temporal facilita a vida de quem quer desenvolver.</p> </li> <li> <p>Primeiros Passos com Temporal: Configuraremos o ambiente, mergulharemos na estrutura b\u00e1sica de um worker e faremos alguns workflows simples e activities.</p> </li> <li> <p>Observalidade e pol\u00edticas de retentativa: aprenderemos a ver dados sobre a execu\u00e7\u00e3o dos nossos workflows e a criar pol\u00edticas de retentativas, al\u00e9m de testarmos elas na pr\u00e1tica.</p> </li> <li> <p>Comunica\u00e7\u00e3o poligl\u00f3ta: aprenderemos como fazer nossa aplica\u00e7\u00e3o se comunicar com outros Workers de outros microsservi\u00e7os que podem estar escritos em qualquer um dos SDKs oficiais do Temporal.</p> </li> <li> <p>Temporal Schedulers: construiremos schedulers que disparar\u00e3o nossos workflows de forma simples, basicamente um cron-job com ester\u00f3ides.</p> </li> <li> <p>Durable executions: por fim, faremos uma introdu\u00e7\u00e3o detalhada a execu\u00e7\u00f5es de longa dura\u00e7\u00e3o, workflows que podem rodar infinitamente por anos e como podemos enviar dados, acessar dados do estado do Workflow atual e alterar esse estado para criar novas intera\u00e7\u00f5es.</p> </li> </ol>"},{"location":"#esse-curso-e-gratuito","title":"\ud83d\udcb0 Esse curso \u00e9 gratuito?","text":"<p>SIM! Esse curso foi todo desenvolvido de forma aberta e ajuda financeira nenhuma! Caso voc\u00ea sinta vontade de contribuir, voc\u00ea pode me pagar um caf\u00e9 por pix (gcsolutions.dev@gmail.com).</p>"},{"location":"#onde-o-curso-sera-disponibilizado","title":"Onde o curso ser\u00e1 disponibilizado?","text":"<p>Esse material ser\u00e1 disponibilizado de duas formas diferentes:</p> <ol> <li> <p>Em livro texto: todo o material est\u00e1 dispon\u00edvel nessa p\u00e1gina;</p> </li> <li> <p>Em formato de v\u00eddeo (ass\u00edncronas): todas as aulas ser\u00e3o disponibilizadas em formato de v\u00eddeo em meu canal do YouTube para quem prefere assistir ao ler. (V\u00eddeos ainda n\u00e3o dispon\u00edveis)</p> </li> </ol>"},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Para aproveitar ao m\u00e1ximo este curso, \u00e9 recomendado que voc\u00ea j\u00e1 tenha algum conhecimento m\u00ednimo em Program\u00e7\u00e3o Orientada a Eventos e entender bastante da linguagem do SDK da sua escolha. Se eu pudesse listar o que considero importante para n\u00e3o se perder, os t\u00f3picos importantes s\u00e3o:</p> <ul> <li>O funcionamento do Docker / docker-compose: como usar (refer\u00eancia);</li> <li>O conceito de programa\u00e7\u00e3o funcional e orienta\u00e7\u00e3o a objeto;</li> <li>Classes de dados: o funcionamento b\u00e1sico de class-validator, dataclasses, Hibernate Validator, DataAnnotations enfim, classes que validam dados.</li> <li>Desenvolvimento Web e APIs RESTful: n\u00e3o essencial, pois iremos abordar pouco, mas o quanto mais voc\u00ea souber melhor para acompanhar;</li> <li>git: n\u00e3o nos aprofundaremos nesse t\u00f3pico durante o curso, mas usaremos opera\u00e7\u00f5es b\u00e1sicas de git (como commit e push);</li> </ul> Caso voc\u00ea manje de ingl\u00eas <p>Caso voc\u00ea conhe\u00e7a bastante ingl\u00eas e queira se aprofundar em mais t\u00f3picos, o pessoal de Curriculum Developer da pr\u00f3pria Temporal Technologies oferecem cursos gratuitos para voc\u00ea ler e testar. Nosso intuito aqui \u00e9 fazer com que voc\u00ea se sinta melhor acolhido com o di\u00e1logo mais intimista de um portugu\u00eas quase bem falado, mas voc\u00ea pode ver mais sobre Temporal nos links abaixo.</p> <ul> <li>Temporal 101</li> <li>Temporal 102</li> <li>Interacting with Workflows</li> </ul>"},{"location":"#aulas","title":"Aulas","text":""},{"location":"#tbd","title":"TBD","text":"<p>Ap\u00f3s todas as aulas, se voc\u00ea sentir que ainda quer evoluir mais e testar seus conhecimentos, podemos conversar mais no meu LinkedIsney.</p>"},{"location":"#quem-vai-ministrar-essas-aulas","title":"\ud83d\udc0f Quem vai ministrar essas aulas?","text":"<p>Prazer! Eu me chamo Gustavo. Mas as pessoas me chamam de Gustavinho.</p> <p>Sou um desenvolvedor estudioso e gosto de ajudar as pessoas a se desenvolverem. Toco um projeto pessoal chamado GC Solutions h\u00e1 quase 3 anos. Minha inten\u00e7\u00e3o \u00e9 poder criar algo um dia que ir\u00e1 ajudar as pessoas.</p> <p>Esse projeto \u00e9 um dos v\u00e1rios projetos que eu toco (ou tento tocar) simultaneamente. Espero que voc\u00ea aprenda bastante e se conecta comigo no LinkedIn para no futuro eu poder recomendar voc\u00ea nas empresas que eu passo!</p> <p>Sou noivo da K\u00e9ssia, uma professora particular de ingl\u00eas que a um tempo vem tendo v\u00e1rios alunos da \u00e1rea de Desenvolvimento. Juntos, temos uma gatinha frajola feinha (linda) chamada Kiara Maria. </p> <p>\ud83d\udc08\u200d\u2b1b</p>"},{"location":"#revisao-e-contribuicoes","title":"\ud83e\uddd0 Revis\u00e3o e contribui\u00e7\u00f5es","text":"<p>Esse material ainda n\u00e3o foi revisado, mas sinta-se a vontade para criar um pull requests para contribuir!</p>"},{"location":"#apoiadores","title":"\ud83e\udec2 Apoiadores","text":"<p>\u00c9 com uma enorme felicidade que eu posso anunciar que o pessoal da Temporal Technologies, criadores do Temporal.io, est\u00e1 dando todo o apoio a cria\u00e7\u00e3o desse curso.</p> <p>Angela Zhao, Lead of Curriculum Engineer, e todo o time de Curriculum da Temporal nos ajuda constantemente tirando d\u00favidas diretamente da fonte;</p> <p>E n\u00e3o s\u00f3 isso: disponibilizaram nos momentos iniciais desse curso todo o apoio necess\u00e1rio para que possamos usar ambientes preparados para fazer nossos workflows e efetuar nossos testes.</p> <p>Visite o trabalho deles verificando o material original em Learn Temporal.</p>"},{"location":"#licenca","title":"\ud83d\udcd6 Licen\u00e7a","text":"<p>Todo esse curso foi escrito e produzido por Gustavo Carneiro de Almeida (@devgustavinho).</p> <p>Todo esse material \u00e9 gratuito e est\u00e1 sob licen\u00e7a Creative Commons BY-NC-SA. O que significa que:</p> <ul> <li>Voc\u00ea pode copiar e reproduzir esse material em qualquer meio e em qualquer formato;</li> <li>Voc\u00ea pode adaptar esse material e construir outros materiais usando esse material.</li> </ul> <p>Pontos de aten\u00e7\u00e3o:</p> <ul> <li>Voc\u00ea precisa dar os devidos cr\u00e9ditos a esse material onde for usar ou adaptar;</li> <li>Voc\u00ea n\u00e3o pode usar para fins comerciais. Como vender ou usar para obter vantagens comerciais;</li> <li>Todo o material derivado desse material deve ser redistribu\u00eddo com a licen\u00e7a CC BY-NC-SA.</li> </ul>"},{"location":"#ferramentas-necessarias-para-acompanhar-o-curso","title":"\ud83e\uddf0 Ferramentas necess\u00e1rias para acompanhar o curso","text":"<ol> <li>Um editor de texto ou IDE de sua escolha. Estou usando o Visual Studio Code enquanto escrevo as aulas;</li> <li>Um terminal. Todos os exemplos do curso s\u00e3o executados e explicados no terminal. Voc\u00ea pode usar o que se sentir mais a vontade e for compat\u00edvel com seu sistema operacional;</li> <li>Se for acompanhar em Typescript, ter o <code>nvm</code> instalado e trocar a vers\u00e3o para a <code>v22.14.0</code> do Node.js. Se for usar outra linguagem, garantir que ela segue as vers\u00f5es recomendadas na documenta\u00e7\u00e3o do Temporal.</li> </ol>"},{"location":"#ferramentas-de-apoio","title":"\ud83d\udd27 Ferramentas de apoio","text":"<p>Toda essa p\u00e1gina foi feita usando as seguintes bibliotecas:</p> <ul> <li>MkDocs: Para gera\u00e7\u00e3o das p\u00e1ginas est\u00e1ticas usando Markdown</li> <li>Mkdocs-material: Tema para o MkDocs</li> <li>Mermaid.js: Constru\u00e7\u00e3o dos diagramas</li> </ul>"},{"location":"#repositorio","title":"\ud83d\udcc1 Reposit\u00f3rio","text":"<p>O versionamento de tudo est\u00e1 sendo feito no reposit\u00f3rio do curso Github</p>"},{"location":"#deploy","title":"\ud83d\ude80 Deploy","text":"<p>Os deploys das p\u00e1ginas est\u00e1ticas geradas pelo MkDocs est\u00e3o sendo feitos no Github Pages</p>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Neste curso, a inten\u00e7\u00e3o \u00e9 fornecer uma compreens\u00e3o inicial, mas bem aprofundada, do Temporal.io, utilizando-o para construir diversos cen\u00e1rios reais em que ele pode ser \u00fatil. O aprendizado ser\u00e1 focado na pr\u00e1tica, e cada conceito ser\u00e1 acompanhado por exemplos e exerc\u00edcios relevantes.</p> <p>Este conte\u00fado foi pensado para auxiliar na compreens\u00e3o de como criar microservi\u00e7os relientes e confi\u00e1veis, dando aten\u00e7\u00e3o a aspectos importantes como idempot\u00eancia, observalidade e pol\u00edticas de retentativas.</p> <p>Nos vemos na primeira aula.</p>"},{"location":"#faq","title":"F.A.Q.","text":"<p>Perguntas frequentes que me fizeram durante os v\u00eddeos:</p> <ul> <li>Que papel de parede \u00e9 esse? \u00c9 o Gyarados Shine do Wallpaper Engine</li> <li>Qual o tema no shell? Basiscamente tudo meu \u00e9 no tema Dracula. O meu Oh-my-zsh! usa o tema spaceship</li> <li>Qual o tema do seu editor? Dracula tamb\u00e9m</li> </ul>"},{"location":"aula_01/","title":"O que \u00e9 e qual o prop\u00f3sito do Temporal?","text":"<p>Objetivos dessa aula:</p> <ul> <li>Entender o que \u00e9 o Temporal e qual seu prop\u00f3sito</li> <li>Mostrar as nomeclaturas do Temporal (Workers, workflows, activities, etc.)</li> <li>Iniciando o Temporal a partir de um docker compose</li> <li>Iniciando o SDK do Temporal com Typescript</li> <li>Execu\u00e7\u00e3o do primeiro \"Hello, World!\" com Temporal, usando Workflows e Activities</li> </ul> <p>Nesta aula, iniciaremos nossa jornada no entedimento do Temporal e na constru\u00e7\u00e3o de uma Worker rodando de verdade. Partiremos do in\u00edcio: principais dores que as empresas tem, motivo das empresas utilizarem Temporal.io, o que ele facilita na vida do desenvolvedor e principais nomeclaturas que precisamos entender para iniciar.</p> <p>Ap\u00f3s isso, configuraremos o ambiente do Temporal utilizando o docker-compose, mostrando a UI do Temporal Server. Em seguida, mostrarei como montar um ambiente apropriado para criar um worker utilizando o Temporal SDK do Typescript. E ent\u00e3o, finalmente, criaremos nosso primeiro \"Hello, World!\" a partir de um Workflow.</p>"},{"location":"aula_01/#proposito-do-temporal","title":"Prop\u00f3sito do Temporal","text":"<p>O Temporal \u00e9 uma plataforma de orquestra\u00e7\u00e3o de execu\u00e7\u00f5es distribu\u00eddas e dur\u00e1veis que permite o desenvolvimento de aplica\u00e7\u00f5es resilientes e escal\u00e1veis. Ele fornece um modelo baseado em workflows para gerenciar tarefas ass\u00edncronas, garantindo confiabilidade, consist\u00eancia e toler\u00e2ncia a falhas sem que n\u00f3s, pobres desenvolvedores, precisemos lidar com complexidades como retries, timeouts e recupera\u00e7\u00e3o de falhas NA M\u00c3O.</p> <p>O principal prop\u00f3sito do Temporal \u00e9 simplificar a constru\u00e7\u00e3o de sistemas distribu\u00eddos ao fornecer uma maneira f\u00e1cil de definir quais execu\u00e7\u00f5es devem ser realizadas. O servidor do Temporal gerencia essas execu\u00e7\u00f5es, garantindo que tarefas sejam conclu\u00eddas mesmo em cen\u00e1rios de falha, reinicializa\u00e7\u00e3o ou indisponibilidade tempor\u00e1ria dos servi\u00e7os.</p> <p>Vamos imaginar ent\u00e3o que somos uma fintech que processa pagamentos para lojistas e precisamos garantir que todas as transa\u00e7\u00f5es sejam conclu\u00eddas com sucesso. Mas de vez em quando quando ningu\u00e9m est\u00e1 olhando, final de semana, ocorrem falhas na comunica\u00e7\u00e3o com o banco ou ent\u00e3o o sistema trava antes de confirmar a transa\u00e7\u00e3o.</p> <p>Usando Temporal, nossa empresa pode garantir que cada pagamento SER\u00c1 conclu\u00eddo, mesmo se houver falha no sistema ou reinicializa\u00e7\u00e3o do servidor. A execu\u00e7\u00e3o do Temporal retomar\u00e1 a transa\u00e7\u00e3o do ponto de falha, retentando s\u00f3 a parte que deu falha e seguindo o resto da execu\u00e7\u00e3o normalmente, sem risco de pagamentos duplicados ou n\u00e3o processados. Isso \u00e9 o que a gente busca atacar: garantia de execu\u00e7\u00e3o como se nada tivesse acontecido.</p>"},{"location":"aula_01/#nomeclaturas-importantes","title":"Nomeclaturas importantes","text":""},{"location":"aula_01/#activities","title":"Activities","text":"<p>Uma Activity \u00e9 o ponto mais simples disso tudo, ela \u00e9 basicamente apenas uma fun\u00e7\u00e3o ou uma tarefa que faz parte de um Workflow. Normalmente, s\u00e3o opera\u00e7\u00f5es que envolvem chamadas externas, como acessar um banco de dados, enviar um e-mail ou chamar uma API.</p> <p>Quando desenvolvendo Activities, projete elas imaginando que elas  podem falhar, mas que o Temporal automaticamente vai gerenciar as retries e timeouts para garantir que sejam conclu\u00eddas.</p>"},{"location":"aula_01/#workflows","title":"Workflows","text":"<p>Um Workflow no Temporal \u00e9 a unidade principal de orquestra\u00e7\u00e3o de processos. Ele define um fluxo de execu\u00e7\u00e3o que pode incluir v\u00e1rias etapas e chamadas ass\u00edncronas. Os Workflows podem pausar e continuar do ponto onde pararam, mesmo ap\u00f3s falhas ou reinicializa\u00e7\u00f5es do sistema.</p> <p>Pense em um Workflow como uma passo-a-passo das Activities. Quando ele for montado, ele deve ser imaginado como um processo que precisa ser recome\u00e7ado todo do zero em caso de falha.</p>"},{"location":"aula_01/#workers","title":"Workers","text":"<p>Um Worker no Temporal \u00e9, de forma simples de se explicar, o nosso c\u00f3digo. Ele \u00e9 respons\u00e1vel por registrar no Temporal Server os nossos Workflows e Activities. Ele deve possuir um ID espec\u00edfico chamado task-queue que gerar\u00e1 uma fila no Temporal Server em que Workers id\u00eanticos (como no caso de necess\u00e1rio escalar r\u00e9plicas por exemplo) poder\u00e3o se inscrever. A task-queue \u00e9 gerada quando voc\u00ea conecta o Worker ao Temporal Server.</p> <p>Nele h\u00e1 uma s\u00e9rie de configura\u00e7\u00f5es que poder\u00e3o ser abordados no futuro, mas trabalharemos primeiro com o b\u00e1sico para n\u00e3o nos embaralharmos muito.</p> <p>PS: Workers s\u00f3 podem ser registrados se eles possuirem ao menos uma Activity</p>"},{"location":"aula_01/#namespaces","title":"Namespaces","text":"<p>Um Namespace no Temporal \u00e9 uma \u00e1rea separada onde todos os componentes operam de maneira isolada, permitindo que diferentes aplicativos ou servi\u00e7os dentro do mesmo cluster do Temporal n\u00e3o interfiram entre si. Eles s\u00e3o separados por nomes diferentes. Nesse curso, n\u00e3o vamos nos aprofundar em namespaces, pois usaremos a auto-gerada.</p>"},{"location":"aula_01/#temporal-server","title":"Temporal Server","text":"<p>\u00c9 o servi\u00e7o a parte onde tudo se conecta. Ele \u00e9 composto por um servi\u00e7o que possui um frontend para termos observabilidade sob nossos Workflows, o servi\u00e7o interno que nos conectamos para registrar nossos namespaces e workers, al\u00e9m de um elasticsearch e o seu pr\u00f3prio banco de dados (por padr\u00e3o, um postgres).</p>"},{"location":"aula_01/#client","title":"Client","text":"<p>Um Client no Temporal \u00e9 qualquer servi\u00e7o ou aplica\u00e7\u00e3o que interage com o Temporal Server para iniciar e monitorar Workflows e executar Activities. Ele \u00e9 respons\u00e1vel por enviar comandos para o servidor e buscar respostas sobre a execu\u00e7\u00e3o de workflows. Ele pode ser:</p> <ul> <li>Uma API com um SDK do Temporal Client instalado;</li> <li>O pr\u00f3prio CLI do temporal</li> <li>A pr\u00f3pria UI do Temporal Server </li> </ul>"},{"location":"aula_01/#instalando-o-temporal-server-com-docker-compose","title":"Instalando o Temporal Server com docker compose","text":"<p>H\u00e1 v\u00e1rias formas de instalar o Temporal na sua m\u00e1quina, mas aqui trabalharemos de forma pr\u00e1tica. O pessoal da Temporal Technologies criou para n\u00f3s um simples <code>docker compose</code>.</p> <pre><code># Baixa o reposit\u00f3rio `docker-compose` da `temporalio`.\ngit clone https://github.com/temporalio/docker-compose.git\n# Entra na pasta\ncd docker-compose\n# Instala as depend\u00eancias e inicia o Temporal\ndocker compose up -d\n</code></pre> <p>Quando o processo finalizar, basta acessar a rota <code>http://localhost:8080/</code> e voc\u00ea ter\u00e1 acesso ao Temporal Server. Certifique-se de que as portas <code>8080</code> e <code>7233</code> est\u00e3o liberadas para que o servidor possa iniciar corretamente. Voc\u00ea ter\u00e1 acesso a uma tela como essa:</p> <p></p> <p>Por enquanto, n\u00e3o exploraremos muito ela, mas ai estar\u00e1 a nossa maior visibilidade e observabilidade que o Temporal nos proporciona. O que precisamos saber:</p> <ul> <li>Na porta <code>8080</code> encontra-se a UI do Temporal Server, onde podemos ter um maior controle sobre o que se passa no backend.</li> <li>Na porta <code>7233</code> encontra-se o backend de conex\u00e3o com o Temporal Server. \u00c9 nele que nossas aplica\u00e7\u00f5es se conectar\u00e3o.</li> </ul>"},{"location":"aula_01/#criando-o-nosso-primeiro-worker","title":"Criando o nosso primeiro Worker","text":"<p>Com tudo em ordem, vamos criar um worker simples utilizando o SDK do Typescript para Temporal. Realizaremos os seguintes comandos: <pre><code>mkdir meu-primeiro-worker &amp;&amp; cd meu-primeiro-worker\nnpm init -y\nnpm install typescript tsx @temporalio/worker @temporalio/workflow\nmkdir workflows\ntouch index.ts workflows/index.ts\n</code></pre></p> <p>O que eles fazem? Criam uma estrutura de pastas como essa:</p> <pre><code>.\n\u251c\u2500\u2500 workflows\n\u2502  \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u2514\u2500\u2500 index.ts\n</code></pre> <p>No nosso <code>./workflows/index.ts</code>, adicionaremos nosso primeir\u00edssimo Workflow! Ele ser\u00e1 algo inicialmente bem b\u00e1sico mas que servir\u00e1 ao nosso prop\u00f3sito:</p> <pre><code>export async function helloWorldWorkflow() {\n    return 'Hello World!'\n}\n</code></pre> <p>E agora no nosso <code>./index.ts</code> da nossa pasta raiz, adicionaremos o seguinte c\u00f3digo: <pre><code>import { NativeConnection, Worker } from '@temporalio/worker';\n\nasync function run() {\n  // Inicia uma conex\u00e3o nativa com o Temporal Server\n  const connection = await NativeConnection.connect();\n  try {\n    // Cria um Worker com task-queue `hello-world` que exportar\u00e1 nosso helloWorldWorkflow para a rede do Temporal Server\n    const worker = await Worker.create({\n      connection,\n      taskQueue: 'hello-world',\n      workflowsPath: require.resolve('./workflows'),\n    });\n\n    // Se conecta com o Temporal Server e executa o worker\n    await worker.run();\n  } finally {\n    await connection.close();\n  }\n}\n\nrun().catch((err) =&gt; {\n  console.error(err);\n  process.exit(1);\n});\n</code></pre> Nosso Worker j\u00e1 est\u00e1 corretamente conectado e aguardando o Temporal Server atribuir alguma tarefa a ele!</p>"},{"location":"aula_01/#executando-nosso-primeiro-workflow","title":"Executando nosso primeiro Workflow","text":"<p>Com todo o ambiente preparado, voltaremos para nosso Temporal Server na porta <code>http://localhost:8080/</code>, e buscaremos o bot\u00e3o <code>Start Workflow</code>:  </p> <p>Ao clicar, ser\u00e1 aberto um formul\u00e1rio para o Temporal Server saber qual \u00e9 o workflow que deve ser iniciado, em qual task-queue, que ID \u00fanico atribuiremos \u00e0quele workflow e quais dados iremos passar como atributos de inser\u00e7\u00e3o. </p> <p>Para nosso primeiro workflow:</p> <ul> <li>Workflow ID:     <code>meu-primeiro-workflow</code></li> <li>Task Queue:      <code>hello-world</code></li> <li>Workflow Type:   <code>helloWorldWorkflow</code></li> <li>Input/data:      ## Deixe vazio</li> </ul> <p>Em seguida, clique em <code>Start Workflow</code> e retorne \u00e0 <code>http://localhost:8080/</code>. Voc\u00ea ver\u00e1 que nosso primeiro workflow foi corretamente executado! Mas como isso aconteceu?</p> <pre><code>sequenceDiagram\n    participant Client\n    participant Temporal Server\n    participant Worker\n\n    Client-&gt;&gt;+Temporal Server: Requisita o workflow a ser iniciado\n    Temporal Server--&gt;&gt;-Client: Workflow \u00e9 iniciado (WorkflowID, RunID)\n    Temporal Server--&gt;&gt;+Worker: Requisita o in\u00edcio do Workflow\n\n    Worker-&gt;&gt;Worker: Executa o workflow at\u00e9 um retorno ou suspens\u00e3o\n    Worker--&gt;&gt;+Temporal Server: Reporta progresso do Workflow\n    Temporal Server--&gt;&gt;+Client: Reporta resultado do Workflow</code></pre>"},{"location":"aula_01/#conclusao","title":"Conclus\u00e3o","text":"<p>Pronto! Agora temos um ambiente de desenvolvimento totalmente configurado para come\u00e7ar a trabalhar com Temporal.io e com nosso Worker com SDK Typescript e j\u00e1 fizemos nossa primeira execu\u00e7\u00e3o de um workflow. Na pr\u00f3xima aula nos aprofundaremos na estrutura\u00e7\u00e3o do nosso Worker. At\u00e9 l\u00e1!</p>"}]}